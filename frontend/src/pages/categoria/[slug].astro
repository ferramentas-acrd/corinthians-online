---
export const prerender = false;

import Layout from '../../layouts/Layout.astro';
import PostCard from '../../components/PostCard.astro';
import { getCategories, getPostsByCategory } from '../../lib/strapi';
import { getPostsByCategoryOptimized, convertToLegacyFormat } from '../../lib/strapi-optimized';
import { checkTrailingSlashRedirect } from '../../lib/utils';

export async function getStaticPaths() {
  const categories = await getCategories();
  
  if (!categories || categories.length === 0) {
    return [];
  }
  
  return categories.map((category) => ({
    params: { slug: category.slug },
    props: { category }
  }));
}

const { category } = Astro.props;
const { slug } = Astro.params;

// Verificar se a URL atual termina com slash, se não, redirecionar
const redirectResponse = checkTrailingSlashRedirect(Astro);
if (redirectResponse) {
  return redirectResponse;
}

if (!category || !slug) {
  return Astro.redirect('/404');
}

// Tentar usar endpoint otimizado primeiro, com fallback para o método original
let posts = [];
try {
  const optimizedPosts = await getPostsByCategoryOptimized(slug);
  if (optimizedPosts && optimizedPosts.length > 0) {
    posts = optimizedPosts.map(convertToLegacyFormat);
  } else {
    throw new Error('Endpoint otimizado retornou dados vazios');
  }
} catch (error) {
  const postsResponse = await getPostsByCategory(slug);
  posts = postsResponse?.data || [];
}
---

<Layout title={category.name}>
  <div class="container mx-auto px-4 py-12">
    <header class="mb-12">
      <h1 class="text-4xl font-bold text-gray-900 mb-2">
        {category.name}
      </h1>
    </header>
    
    {posts.length > 0 ? (
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {posts.map((post, index) => (
          <PostCard post={post} index={index} />
        ))}
      </div>
    ) : (
      <div class="text-center py-12">
        <p class="text-gray-500 text-lg">
          Nenhuma publicação encontrada nesta categoria.
        </p>
      </div>
    )}
  </div>
</Layout>