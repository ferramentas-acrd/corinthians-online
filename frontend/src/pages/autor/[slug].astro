---
export const prerender = false;

import Layout from '../../layouts/Layout.astro';
import PostCard from '../../components/PostCard.astro';
import { getAuthors, getPostsByAuthor, getImageUrl } from '../../lib/strapi';
import { checkTrailingSlashRedirect } from '../../lib/utils';
import '../../styles/pages/author.css';

export async function getStaticPaths() {
  const authors = await getAuthors();
  
  // Filtrar apenas autores que têm slug válido
  const authorsWithSlug = authors.filter(author => author.slug && typeof author.slug === 'string');
  
  return authorsWithSlug.map(author => ({
    params: { slug: author.slug },
    props: { author }
  }));
}

const { author } = Astro.props;

// Verificar se a URL atual termina com slash, se não, redirecionar
const redirectResponse = checkTrailingSlashRedirect(Astro);
if (redirectResponse) {
  return redirectResponse;
}

if (!author || !author.slug) {
  return Astro.redirect('/404');
}

// Buscar posts do autor
const { data: authorPosts } = await getPostsByAuthor(author.slug);

// Função para gerar schema do autor (Person)
function generatePersonSchema(author: any, authorPosts: any[]) {
  const baseUrl = import.meta.env.PUBLIC_BASE_URL || `${Astro.url.protocol}//${Astro.url.host}`;
  const strapiBaseUrl = import.meta.env.PUBLIC_STRAPI_URL || 'http://localhost:1337';
  const currentUrl = `${baseUrl}/autor/${author.slug}`;
  
  // URL da imagem do avatar
  let imageUrl = null;
  if (author.avatar?.url) {
    imageUrl = author.avatar.url.startsWith('http') 
      ? author.avatar.url 
      : `${strapiBaseUrl}${author.avatar.url}`;
  }

  const personSchema = {
    "@context": "https://schema.org",
    "@type": "Person",
    "@id": `${currentUrl}#person`,
    "name": author.name,
    "url": currentUrl,
    ...(author.bio && { "description": author.bio }),
    ...(imageUrl && {
      "image": {
        "@type": "ImageObject",
        "url": imageUrl,
        "caption": `Foto de ${author.name}`
      }
    }),
    "jobTitle": "Autor",
    "worksFor": {
      "@type": "Organization",
      "@id": `${baseUrl}#organization`
    },
    ...(author.email && { "email": author.email }),
    ...(author.linkedin && {
      "sameAs": [author.linkedin]
    }),
    "mainEntityOfPage": {
      "@type": "ProfilePage",
      "@id": currentUrl,
      "about": {
        "@type": "Person",
        "@id": `${currentUrl}#person`
      }
    },
    "alumniOf": {
      "@type": "Organization",
      "name": "Redação"
    },
    ...(authorPosts.length > 0 && {
      "knowsAbout": authorPosts.slice(0, 5).map(post => post.title).join(", "),
      "hasOccupation": {
        "@type": "Occupation",
        "name": "Jornalista",
        "description": `Autor de ${authorPosts.length} artigos publicados`
      }
    })
  };

  // Remove campos undefined/null para limpeza
  return JSON.parse(JSON.stringify(personSchema, (key, value) => {
    if (value === undefined || value === null || (Array.isArray(value) && value.length === 0)) {
      return undefined;
    }
    return value;
  }));
}

// Gerar o schema do autor
const authorSchema = generatePersonSchema(author, authorPosts);
---

<Layout 
  title={`Autor: ${author.name}`} 
  description={author.bio}
  ogType="article"
  customSchema={authorSchema}
>
  <div class="author-hero-section">
    <div class="author-hero-container">
      {author.avatar && (
        <div class="author-hero-avatar">
          <img 
            src={getImageUrl(author.avatar)} 
            alt={author.name}
            width={author.avatar.width || 150}
            height={author.avatar.height || 150}
            loading="eager"
          />
        </div>
      )}
      
      <div class="author-hero-content">
        <h1 class="author-hero-name">{author.name}</h1>
        
        <div class="author-badge">
          <span class="badge-text">{authorPosts.length} artigos</span>
        </div>
        
        <div class="author-social-links">
          {author.email && (
            <a href={`mailto:${author.email}`} class="social-link email-link" title="Email">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                <path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/>
              </svg>
            </a>
          )}
          
          {author.linkedin && (
            <a href={author.linkedin} target="_blank" rel="noopener noreferrer" class="social-link linkedin-link" title="LinkedIn">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
              </svg>
            </a>
          )}
        </div>
        
        {author.bio && (
          <p class="author-hero-bio">{author.bio}</p>
        )}
      </div>
    </div>
  </div>

  <div class="author-page">
    <section class="author-posts">
      <h2 class="section-title">Artigos de {author.name}</h2>
      <div class="posts-grid">
        {authorPosts.map((post, index) => (
          <PostCard post={post} index={index} />
        ))}
      </div>
    </section>
  </div>
</Layout>