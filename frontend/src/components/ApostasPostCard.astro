---
import { getApostasPostUrl, getApostasAuthorUrl, getApostasCategoryUrl } from '../lib/routes';
import { getImageUrl } from '../lib/strapi';

export interface Props {
  post: {
    id: number;
    title: string;
    slug: string;
    excerpt?: string;
    publishedAt?: string | null;
    createdAt: string;
    coverImage?: {
      url: string;
      alternativeText?: string;
      formats?: {
        thumbnail?: { url: string; width: number; height: number; };
        small?: { url: string; width: number; height: number; };
        medium?: { url: string; width: number; height: number; };
      };
    };
    category?: {
      name: string;
      slug: string;
    };
    authors?: Array<{
      name: string;
      slug?: string;
    }>;
  };
  index?: number;
}

const { post, index } = Astro.props;

// Função para decodificar entidades HTML
function decodeHtmlEntities(text: string): string {
  const textarea = typeof document !== 'undefined' ? document.createElement('textarea') : null;
  if (!textarea) {
    // Server-side fallback
    return text
      .replace(/&quot;/g, '"')
      .replace(/&#39;/g, "'")
      .replace(/&lt;/g, '<')
      .replace(/&gt;/g, '>')
      .replace(/&amp;/g, '&')
      .replace(/&hellip;/g, '…');
  }
  textarea.innerHTML = text;
  return textarea.value;
}

// Função para formatar data
function formatDate(dateString: string): string {
  if (!dateString) return '';
  
  try {
    const date = new Date(dateString);
    
    // Verificar se a data é válida
    if (isNaN(date.getTime())) {
      return '';
    }
    
    return date.toLocaleDateString('pt-BR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  } catch (error) {
    return '';
  }
}

const postDate = post.publishedAt || post.createdAt;
const imageUrl = getImageUrl(post.coverImage, 'medium');
const imageAlt = post.coverImage?.alternativeText || post.title;
---

<article class="post-card">
  <a href={getApostasPostUrl(post.slug)} class="post-card-link">
    {post.coverImage && imageUrl && (
      <div class="post-card-image">
        <img 
          src={imageUrl} 
          alt={imageAlt}
          loading={index && index < 3 ? "eager" : "lazy"}
          width={post.coverImage.formats?.medium?.width || post.coverImage.formats?.small?.width || 300}
          height={post.coverImage.formats?.medium?.height || post.coverImage.formats?.small?.height || 200}
        />
      </div>
    )}
    
    <div class="post-card-content">
      <h3 class="post-card-title">{decodeHtmlEntities(post.title)}</h3>
      
      {post.excerpt && (
        <p class="post-card-excerpt">{decodeHtmlEntities(post.excerpt)}</p>
      )}
      
      <div class="post-card-meta">
        {(post.authors && post.authors.length > 0 && post.authors[0] && post.authors[0].name) && (
          <span class="post-card-author">{post.authors[0].name}</span>
        )}
        <time class="post-card-date" datetime={postDate}>
          {formatDate(postDate)}
        </time>
      </div>
    </div>
  </a>
</article>

<style>
  .post-card {
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .post-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
  }

  .post-card-link {
    text-decoration: none;
    color: inherit;
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .post-card-image {
    width: 100%;
    height: 200px;
    overflow: hidden;
    background: #f8f9fa;
  }

  .post-card-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .post-card:hover .post-card-image img {
    transform: scale(1.05);
  }

  .post-card-content {
    padding: 1.25rem;
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .post-card-title {
    font-size: 1.125rem;
    font-weight: 600;
    line-height: 1.4;
    margin: 0 0 0.75rem 0;
    color: #1a202c;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .post-card-excerpt {
    font-size: 0.875rem;
    line-height: 1.5;
    color: #4a5568;
    margin: 0 0 1rem 0;
    flex: 1;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .post-card-meta {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.75rem;
    color: #718096;
    margin-top: auto;
  }

  .post-card-author {
    font-weight: 500;
    color: #2d3748;
  }

  .post-card-author::after {
    content: "•";
    margin-left: 0.5rem;
    color: #cbd5e0;
  }

  .post-card-date {
    color: #718096;
  }

  @media (max-width: 768px) {
    .post-card-content {
      padding: 1rem;
    }
    
    .post-card-title {
      font-size: 1rem;
    }
    
    .post-card-excerpt {
      font-size: 0.8rem;
    }
  }
</style>
